using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Example_005
{
    class Program
    {
        static void Main(string[] args)
        {
            #region задиние из исходнико
            // Домашнее задание
            // Требуется написать несколько методов
            //
            // Задание 1.
            // Воспользовавшись решением задания 3 четвертого модуля
            // 1.1. Создать метод, принимающий число и матрицу, возвращающий матрицу умноженную на число
            // 1.2. Создать метод, принимающий две матрицу, возвращающий их сумму
            // 1.3. Создать метод, принимающий две матрицу, возвращающий их произведение
            //
            // Задание 2.
            // 1. Создать метод, принимающий  текст и возвращающий слово, содержащее минимальное количество букв
            // 2.* Создать метод, принимающий  текст и возвращающий слово(слова) с максимальным количеством букв 
            // Примечание: слова в тексте могут быть разделены символами (пробелом, точкой, запятой) 
            // Пример: Текст: "A ББ ВВВ ГГГГ ДДДД  ДД ЕЕ ЖЖ ЗЗЗ"
            // 1. Ответ: А
            // 2. ГГГГ, ДДДД
            //
            // Задание 3. Создать метод, принимающий текст. 
            // Результатом работы метода должен быть новый текст, в котором
            // удалены все кратные рядом стоящие символы, оставив по одному 
            // Пример: ПППОООГГГООООДДДААА >>> ПОГОДА
            // Пример: Ххххоооорррооошшшиий деееннннь >>> хороший день
            // 
            // Задание 4. Написать метод принимающий некоторое количесво чисел, выяснить
            // является заданная последовательность элементами арифметической или геометрической прогрессии
            // 
            // Примечание
            //             http://ru.wikipedia.org/wiki/Арифметическая_прогрессия
            //             http://ru.wikipedia.org/wiki/Геометрическая_прогрессия
            //
            // *Задание 5
            // Вычислить, используя рекурсию, функцию Аккермана:
            // A(2, 5), A(1, 2)
            // A(n, m) = m + 1, если n = 0,
            //         = A(n - 1, 1), если n <> 0, m = 0,
            //         = A(n - 1, A(n, m - 1)), если n> 0, m > 0.
            // 
            // Весь код должен быть откоммментирован
            #endregion

            #region Задание с сайта Задание 1.Метод разделения строки на слова.




            //Что входит в задание
            //
            //Задание 2.Перестановка слов в предложении.


            //Задание 1.Метод разделения строки на слова


            //Что нужно сделать
            //Пользователь вводит в консольном приложении длинное предложение.
            //Каждое слово в этом предложении отделено одним пробелом.
            //Необходимо создать метод, который в качестве входного параметра принимает строковую переменную,
            //а в качестве возвращаемого значения — массив слов.
            //После вызова данного метода программа вызывает второй метод,
            //который выводит каждое слово в отдельной строке.   



            //Советы и рекомендации
            //Для реализации данной программы можно написать алгоритм разделения на слова самостоятельно, используя цикл.Также можете использовать метод string.Split(‘ ’); Прочитайте об этом методе подробнее на странице документации Microsoft.
            //Для названия методов используйте CamelCase, когда каждое следующее слово начинается с заглавной буквы. Например, метод с именем GetPositiveRandomInt возвращает положительное целое случайное число.По такому же принципу следует называть и свои методы.


            //Что оценивается
            //В программе, помимо основного метода main, присутствует два других метода, которые вызываются в теле метода main.
            //Названием методов соответствуют тому, что они делают(разделяют или выводят данные).


            //Задание 2.Перестановка слов в предложении


            //Что нужно сделать
            //Пользователь вводит в программе длинное предложение. Каждое слово раздельно одним пробелом.После ввода пользователь нажимает клавишу Enter. Необходимо создать два метода:

            //первый метод разделяет слова в предложении;
            //            второй метод меняет эти слова местами(в обратной последовательности). 
            //При этом важно учесть, что один метод вызывается внутри другого метода, то есть в методе main вызывается метод cо следующей сигнатурой — ReversWords(string inputPhrase).Внутри этого метода вызывается метод по разделению входной фразы на слова.



            //Советы и рекомендации
            //Для сложения строк можно использовать конкатенацию строк. Выражение вида ResultString += NewString + “ ” добавит к текущей строке, которая представлена переменной ResultString, новую строку из переменной NewString и также добавит пробел к концу строки. 
            //Для реализации алгоритма разделения строки на слова можно воспользоваться рекомендациями из задания 1.


            //Что оценивается
            //Вызов метода по разделению на слова происходит внутри метода, который отвечает непосредственно за инвертирование слов в предложении.



            #endregion
        }
    }
}
